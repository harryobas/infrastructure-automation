---
# Which host(s) to run on
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    asg_name: "web-asg-{{ realm }}"
    charge_code: INT03 - IT/Operations
    corp_cidr_av: 172.18.0.0/16
    dns_zone: nimaws.com
    elb_name: "elb-{{ realm }}"
    env: dev
    ext_rtbl_name: "rtbl-external-{{ realm }}"
    ext_subnet_name: "ext-us-west-2a-{{ realm }}"
    git_branch: praco_tutorial
    igw_name: "igw-{{ realm }}"
    instance:
      ami: ami-775e4f16
      cluster: rainbow
      key_name: raco
      name: "web-svr-{{ realm }}"
      role: Web
      type: t2.micro
    int_rtbl_name: "rtbl-internal-{{ realm }}"
    int_subnet_name: "int-us-west-2a-{{ realm }}"
    as_lc_name: "web_as_lc-{{ realm }}"
    proj_url: "{{ realm }}_sample-proj.nimaws.com"
    realm: raco
    region: us-west-2
    sec_grp_http_ext_name: "http-ext-sec-grp-{{ realm }}"
    sec_grp_http_int_name: "http-int-sec-grp-{{ realm }}"
    sec_grp_ssh_name: "ssh-sec-grp-{{ realm }}"
    sub_ext_2b:
      az: us-west-2b
      cidr: 10.150.5.0/24
      name: "sub-ext-uw2b-{{ realm }}"
    sub_int_2a:
      az: us-west-2a
      cidr: 10.150.1.0/24
      name: "sub-int-uw2a-{{ realm }}"
    sub_int_2c:
      az: us-west-2c
      cidr: 10.150.2.0/24
      name: "sub-int-uw2c-{{ realm }}"
    # TODO: find out if this is the correct way to designate the file
    user_data_file: files/user_data.sh
    vpc:                                 # Mordor
      cidr: 10.150.0.0/16
      name: "vpc-{{ realm }}"
#  avoid using vars_files. use hostvars and/or group vars. more scalable
#  vars_files:
#    - raco_infrastructure.yml
  tasks: 
    # Create new (sandbox) VPC
    - name: create new (sandbox) VPC
      ec2_vpc:
        cidr_block: "{{ vpc.cidr }}"
        internet_gateway: yes
        region: "{{ region }}"
        resource_tags:
           ChargeCode: "{{ charge_code }}"
           Env: "{{ env }}"
           Name: "{{ vpc.name }}"
           VPCName: "{{ vpc.name }}"
        state: present
        wait: yes
        wait_timeout: 600                       # 600 seconds = 10 minutes
      register: vpc_created                     # vpc_created.vpc_id
      #module.exit_json(changed=changed, vpc_id=new_vpc_id, vpc=vpc_dict, igw_id=igw_id, subnets=subnets_changed)
    - name: print out value of vpc_created
      #debug: var=vpc_created verbosity=1       # verbosity added in ansible 2.1
      debug: var=vpc_created
    # Create Internet Gateway
    - name: create internet gateway
      ec2_vpc_igw:
        region: "{{ region }}"
        state: present
        tags:
           ChargeCode: "{{ charge_code }}"
           Env: "{{ env }}"
           Name: "{{ igw_name }}"
           VPCName: "{{ vpc.name }}"
        vpc_id: "{{ vpc_created.vpc_id }}"
      register: igw_created        # igw_created.gateway_id
    - name: print out value of igw_created
      debug: var=igw_created
    # Create Subnets; internal (private) and external (public)
    - name: "create internal subnet {{ sub_int_2a.name }} in {{ sub_int_2a.az }}"
      ec2_vpc_subnet:
        az: "{{ sub_int_2a.az }}"
        cidr: "{{ sub_int_2a.cidr }}"
        region: "{{ region }}"
        state: present
        tags:
           ChargeCode: "{{ charge_code }}"
           Env: "{{ env }}"
           Name: "{{ sub_int_2a.name }}"
           VPCName: "{{ vpc.name }}"
        vpc_id: "{{ vpc_created.vpc_id }}"
      register: int_subnet_2a_created              # int_subnet_2a_created.subnet
    - name: print out value of int_subnet_2a_created
      debug: var=int_subnet_2a_created
    - name: "create internal subnet {{ sub_int_2c.name }} in {{ sub_int_2c.az }}"
      ec2_vpc_subnet:
        az: "{{ sub_int_2c.az }}"
        cidr:  "{{ sub_int_2c.cidr }}"
        region: "{{ region }}"
        state: present
        tags:
           ChargeCode: "{{ charge_code }}"
           Env: "{{ env }}"
           Name: "{{ sub_int_2c.name }}"
           VPCName: "{{ vpc.name }}"
        vpc_id: "{{ vpc_created.vpc_id }}"
      register: int_subnet_2c_created              # int_subnet_2c_created.subnet
    - name: print out value of int_subnet_2c_created
      debug: var=int_subnet_2c_created
    - name: "create internal subnet {{ sub_ext_2b.name }} in {{ sub_ext_2b.az }}"
      ec2_vpc_subnet:
        az: "{{ sub_ext_2b.az }}"
        cidr:  "{{ sub_ext_2b.cidr }}"
        region: "{{ region }}"
        state: present
        tags:
           ChargeCode: "{{ charge_code }}"
           Env: "{{ env }}"
           Name: "{{ sub_ext_2b.name }}"
           VPCName: "{{ vpc.name }}"
        vpc_id: "{{ vpc_created.vpc_id }}"
      register: ext_subnet_2b_created              # ext_subnet_2b_created.subnet
      #module.exit_json(changed=changed, subnet=subnet_dict)
    - name: print out value of ext_subnet_2b_created
      debug: var=ext_subnet_2b_created
    # Create internal Route Table
    - name: create internal route table
      ec2_vpc_route_table:
        region: "{{ region }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_created.gateway_id }}"
        state: present
        subnets:
          - "{{ ext_subnet_2b_created.subnet }}"
          - "{{ int_subnet_2a_created.subnet }}"
          - "{{ int_subnet_2c_created.subnet }}"
        tags:
           ChargeCode: "{{ charge_code }}"
           Env: "{{ env }}"
           Name: "{{ int_rtbl_name }}"
           VPCName: "{{ vpc.name }}"
        vpc_id: "{{ vpc_created.vpc_id }}"
      register: int_rtbl_created                # int_rtbl_created.id
    - name: print out value of int_rtbl_created
      debug: var=int_rtbl_created
# Not sure I need this
#     # Create external Route Table
#     - name: create external/public route table
#       ec2_vpc_route_table:
#         vpc_id: "{{ vpc_created.vpc_id }}"
#         region: "{{ region }}"
#         state: present
#         routes:
#           - dest: 0.0.0.0/0
#             gateway_id: "{{ igw_created.gateway_id }}"
#         subnets: "{{ ext_subnet_2b_created.subnet }}"
#         tags:
#            ChargeCode: "{{ charge_code }}"
#            Env: "{{ env }}"
#            Name: "{{ ext_rtbl_name }}"
#            VPCName: "{{ vpc.name }}"
#       register: pub_rtbl_created                # pub_rtbl_created.id
#     - name: print out value of pub_rtbl_created
#       debug: var=pub_rtbl_created
    # Create Security Groups
    - name: create external HTTP security group
      ec2_group:
        description: "External HTTP Security Group - {{ realm }}"
        name: "{{ sec_grp_http_ext_name }}"
        region: "{{ region }}"
        state: present
        # rules: "{{ sec.grp.http.rules }}.{{ realm }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        # If no rules_egress supplied, a default all-out rule is assumed
        # rules_egress: "{{ sec.grp.http.rules_egress }}.{{ realm }}"
        # rules_egress:
        #   - proto: tcp
        #     from_port: All
        #     to_port: All
        #     cidr_ip: 0.0.0.0/0
        vpc_id: "{{ vpc_created.vpc_id }}"
      register: http_ext_secgrp_created
      #module.exit_json(changed=changed, group_id=group.id)
    - name: print out value of http_ext_secgrp_created
      debug: var=http_ext_secgrp_created
    - name: create internal HTTP security group
      ec2_group:
        description: "HTTP Security Group - {{ realm }}"
        name: "{{ sec_grp_http_int_name }}"
        region: "{{ region }}"
        state: present
        # rules: "{{ sec.grp.http.rules }}.{{ realm }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ vpc.cidr }}"
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ corp_cidr_av }}"
        # not supplying rules_egress, a default all-out rule will be assumed
        vpc_id: "{{ vpc_created.vpc_id }}"
      register: http_int_secgrp_created
      #module.exit_json(changed=changed, group_id=group.id)
    - name: print out value of http_int_secgrp_created
      debug: var=http_int_secgrp_created
    - name: create SSH security group
      ec2_group:
        name: "{{ sec_grp_ssh_name }}"
        #description: "{{ sec.grp.ssh.desc }}.{{ realm }}"
        description: Racos SSH Security Group
        vpc_id: "{{ vpc_created.vpc_id }}"
        region: "{{ region }}"
        state: present
        # rules: "{{ sec.grp.ssh.rules }}.{{ realm }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ corp_cidr_av }}"
        # not supplying rules_egress, a default all-out rule will be assumed
      register: ssh_secgrp_created
      #module.exit_json(changed=changed, group_id=group.id)
    - name: print out value of ssh_secgrp_created
      debug: var=ssh_secgrp_created
    - name: tag the security groups
      ec2_tag:
        region: "{{ region }}"
        resource: "{{ item.group_id }}"
        state: present
        tags:
          ChargeCode: "{{ charge_code }}"
          Env: "{{ env }}"
          Name: "{{ item.name }}"
          VPCName: "{{ vpc.name }}"
      with_items:
        - { name: 'sec_grp_http_ext_name', group_id: "{{ http_ext_secgrp_created.group_id }}" }
        - { name: 'sec_grp_http_int_name', group_id: "{{ http_int_secgrp_created.group_id }}" }
        - { name: 'sec_grp_ssh_name', group_id: "{{ ssh_secgrp_created.group_id }}" }
    # Create ELB
    - name: create ELB - listen 80 - forward 80
      ec2_elb_lb:
        cross_az_load_balancing: yes
        health_check:
          interval: 30          # seconds
          ping_protocal: http
          ping_port: 80
          ping_path: "/index.html"
          response_timeout: 5   # seconds
          unhealthy_threshold: 2
          healthy_threshold: 10
# hopefully i can attach the instances to this ELB because they
# have not been created yet (chicken <-> egg)
#         instance_ids:
#           - i-????????
#           - i-????????
        name: "{{ elb_name }}"
        region: "{{ region }}"
        security_group_ids: "{{ http_ext_secgrp_created.group_id }}"
        subnets:
          - "{{ int_subnet_2a_created.subnet }}"
          - "{{ int_subnet_2c_created.subnet }}"
        listeners:
          - protocal: http
            load_balancer_port: 80
            instance_port: 80
        state: present
        # zones should be empty if using "subnets"
        #zones: "{{ az }}"
      register: elb_created             # elb_created.dns_name
      #module.exit_json(changed=changed, elb=elb_man.get_info(),ansible_facts=ansible_facts)
      #   elb.name, elb.dns_name
    - name: print out value of elb_created
      debug: var=elb_created
    # Create Route 53
    - name: "create Route 53 entry (CNAME for {{ proj_url }})"
      route53:
        command: create
        record: "{{ proj_url }}"
        ttl: 300        # seconds
        type: CNAME
        value: elb_created.dns_name
        zone: "{{ dns_zone }}"
        # maybe add health_check
        #health_check: ????
    # Create a key pair
    - name: create a key pair
      ec2_key:
        name: "{{ instance.key_name }}"
        state: present
        register: key_created
        # TODO: learn how to save the private key returned to a local file
    # Create Auto Scaling shtuff
    - name: create Auto Scaling launch config
      ec2_lc:
        image_id: "{{ instance.ami }}"
        instance_type: "{{ instance.type }}"
        key_name: "{{ instance.key_name }}"
        name: "{{ as_lc_name }}"
        region: "{{ region }}"
        security_groups:
          - "{{ http_int_secgrp_created.group_id }}"
          - "{{ ssh_secgrp_created.group_id }}"
        state: present
        user_data: "{{ user_data_file }}"
    - name: create/configure Auto Scaling groups
      ec2_asg:
        desired_capacity: 1
        launch_config_name: "{{ as_lc_name }}"
        load_balancers: "{{ elb_name }}"
        max_size: 1
        min_size: 1
        name: "{{ asg_name }}-{{ item.suffix }}"
        region: "{{ region }}"
        state: present
        tags:
           BranchTag: "{{ git_branch }}"
           ChargeCode: "{{ charge_code }}"
           Cluster: "{{ instance.cluster }}"
           Env: "{{ env }}"
           MachineRole: "{{ instance.role }}"
           # hmmm, how to get the UUID of the instance attached to the name?
           # can add code to the user-data script/file
           Name: "{{ instance.name }}-{{ item.suffix }}"
           VPCName: "{{ vpc.name }}"
        vpc_zone_identifier: "{{ item.subnet }}"
# I don't think that I need this
#       ec2_scaling_policy:
#         adjustment_type: ExactCapacity
#         asg_name: "{{ awg_name }}-{{ item.suffix }}"
#         name: "{{ awg_name }}-{{ item.suffix }}-policy"
#         region: "{{ region }}"
#         state: present
      with_items:
        - { suffix: '2a', subnet: "{{ int_subnet_2a_created.subnet }}" }
        - { suffix: '2c', subnet: "{{ int_subnet_2c_created.subnet }}" }
...
